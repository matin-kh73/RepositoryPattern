<?php

namespace Mtkh\Repo\Commands;


use Illuminate\Console\GeneratorCommand;
use Illuminate\Contracts\Filesystem\FileNotFoundException;
use Mtkh\Repo\Services\RepositoryService;
use Symfony\Component\Console\Input\InputArgument;


class RepositoryCommand extends GeneratorCommand
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'make:repository {name} {--namespace=}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'create a new model repository';

    /**
     * @var RepositoryService
     */
    private $repoService;

    /**
     * Execute the console command.
     *
     * @return mixed
     * @throws FileNotFoundException
     */
    public function handle()
    {
        $this->repoService = new RepositoryService($this->argument('name'), $this->option('namespace'));

        $response = $this->repoService->makeRepository($this->buildClass($this->repoService->getProperty('repositoryClass'), 'Repository'));

        if ($response) {
            $this->info(RepositoryService::TYPE . ' created successfully.');
            $this->line("<info>Created Repository :</info>" . $this->repoService->getProperty('repositoryClass'));
        } else {
            $this->error($this->repoService->getProperty('modelName') . RepositoryService::TYPE . ' already exists!');
        }

        $this->repoService->makeRepositoryContract($this->buildClass($this->repoService->getProperty('repositoryClass'), 'RepositoryContract'));
        $this->repoService->makePrerequisiteClass();
        $this->repoService->makeRepoServiceProvider();
    }

    /**
     * Replace the class name for the given stub.
     *
     * @param  string  $stub
     * @param  string  $name
     * @return string
     */
    protected function replaceClass($stub, $name)
    {
        $stub = parent::replaceClass($stub, $name);

        return str_replace('DummyModel', $this->repoService->getProperty('modelName'), $stub);
    }

    /**
     * Replace the namespace for the given stub.
     *
     * @param  string  $stub
     * @param  string  $name
     * @return $this
     */
    protected function replaceNamespace(&$stub, $name)
    {
        $stub = str_replace(
            ['DummyModelNamespace', 'DummyNamespace', 'DummyRootNamespace', 'NamespacedDummyUserModel'],
            [$this->repoService->getProperty('modelPath') ,$this->getNamespace($name), $this->rootNamespace(), $this->userProviderModel()],
            $stub
        );

        return $this;
    }

    /**
     * Get the stub file for the generator.
     *
     * @param string|null $name
     * @return string
     */
    protected function getStub(string $name = null)
    {
        return  __DIR__ . "/../stubs/$name.stub";
    }

    /**
     * Get the default namespace for the class.
     *
     * @param  string  $rootNamespace
     * @return string
     */
    protected function getDefaultNamespace($rootNamespace)
    {
        return $rootNamespace . '\Repositories';
    }

    /**
     * Get the console command arguments.
     *
     * @return array
     */
    protected function getArguments()
    {
        return [
            ['name', InputArgument::REQUIRED, 'The name of the model class.'],
        ];
    }

    /**
     * Get the root namespace for the class.
     *
     * @return string
     */
    protected function rootNamespace()
    {
        if (empty($rootNamespace = $this->option('namespace'))){
            return parent::rootNamespace(); // TODO: Change the autogenerated stub
        }
        return $rootNamespace . '\\';
    }

    /**
     * Build the class with the given name.
     *
     * @param string $name
     * @param $stubName
     * @return string
     *
     * @throws FileNotFoundException
     */
    protected function buildClass($name, $stubName = '')
    {
        $stub = $this->files->get($this->getStub($stubName));

        return $this->replaceNamespace($stub, $name)->replaceClass($stub, $name);
    }
}
